{"queryPath":"/index.js","absPath":"/Users/dicardo/nvmProjects/dataVTest/index.js","realPath":"/index.js","type":"script","source":"let Event = require('bcore/event');\nlet $ = require('jquery');\nlet _ = require('lodash');\nlet { Scatter } = require('datav-g2plot-adaptor');\n\n/**\n * 马良基础类\n */\nmodule.exports = Event.extend(function Base(container, config) {\n    this.config = {\n        theme: {}\n    }\n    this.container = $(container);           //容器\n    this.apis = config.apis;                 //hook一定要有\n    this._data = null;                       //数据\n    this.chart = null;                       //图表\n    this.init(config);\n}, {\n  /**\n   * 公有初始化\n   */\n    init: function (config) {\n        // 1.初始化,合并配置\n        this.mergeConfig(config);\n        // 2.刷新布局,针对有子组件的组件 可有可无\n        this.updateLayout();\n        // 3.子组件实例化\n        this.chart = new Scatter(this.container[0], {\n            appendPadding: 10,\n            data: [],\n            xField: 'x',\n            yField: 'y',\n            shape: 'circle',\n            colorField: 'colorField',\n            size: 4,\n            yAxis: {\n                title: {\n                text: 'Comments',\n                },\n                nice: true,\n                line: {\n                    style: {\n                        stroke: '#aaa',\n                    },\n                },\n            },\n            xAxis: {\n                title: {\n                    text: 'Views',\n                },\n                min: -100,\n                grid: {\n                    line: {\n                        style: {\n                            stroke: '#eee',\n                        },\n                    },\n                },\n                line: {\n                    style: {\n                        stroke: '#aaa',\n                    },\n                },\n            },\n        });\n        //4.如果有需要, 更新样式\n        this.updateStyle();\n        this.chart.render();\n    },\n    /**\n    * 绘制\n    * @param data\n    * @param options 不一定有\n    * !!注意: 第二个参数支持config, 就不需要updateOptions这个方法了\n    */\n    render: function (data, config) {\n        data = this.data(data);\n        // var cfg = this.mergeConfig(config);\n        //更新图表\n        this.chart.changeData(data);\n        // this.container.html(data[0].value)\n        //如果有需要的话,更新样式\n        this.updateStyle();\n    },\n    /**\n     *\n     * @param width\n     * @param height\n     */\n    resize: function (width, height) {\n        this.updateLayout(width, height);\n        //更新图表\n        //this.chart.render({\n        //  width: width,\n        //  height: height\n        //})\n    },\n\n    /**\n     * 每个组件根据自身需要,从主题中获取颜色 覆盖到自身配置的颜色中.\n     * 暂时可以不填内容\n     */\n    setColors: function () {\n        //比如\n        // var cfg = this.config;\n        // cfg.color = \"#000\";\n    },\n    /**\n     * 数据,设置和获取数据\n     * @param data\n     * @returns {*|number}\n     */\n    data: function (data) {\n        if (data) {\n            this._data = data;\n        }\n        return this._data;\n    },\n    /**\n     * 更新配置\n     * 优先级: config.colors > config.theme > this.config.theme > this.config.colors\n     * [注] 有数组的配置一定要替换\n     * @param config\n     * @private\n     */\n    mergeConfig: function (config) {\n        if (!config) {\n            return this.config\n        }\n        this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n        this.setColors();\n        this.config = _.defaultsDeep(config || {}, this.config);\n        return this.config;\n    },\n    /**\n     * 更新布局\n     * 可有可无\n     */\n    updateLayout: function () {},\n    /**\n     * 更新样式\n     * 有些子组件控制不到的,但是需要控制改变的,在这里实现\n     */\n    updateStyle: function () {\n        var cfg = this.config;\n        this.container.css({\n            'font-size': cfg.size + 'px',\n            'color': cfg.color || '#fff'\n        });\n    },\n    /**\n     * 更新配置\n     * !!注意:如果render支持第二个参数options, 那updateOptions不是必须的\n     */\n    updateOptions: function (config) {\n      this.chart.update(\n        {\n          pointStyle: {\n            stroke: config.options.graph.stroke.lineColor,\n            lineWidth: config.options.graph.stroke.lineWidth,\n            lineDash: config.options.graph.stroke.lineDash\n          },\n          size: config.options.graph.size,\n          color: config.options.graph.color\n          \n          \n        }\n      );\n      \n    },\n    /**\n     * 更新某些配置\n     * 给可以增量更新配置的组件用\n     */\n    //updateXXX: function () {},\n    /**\n     * 销毁组件\n     */\n     destroy: function() {\n         console.log('请实现 destroy 方法')\n     }\n});","code":"'use strict';\n\nlet Event = require('bcore/event');\nlet $ = require('jquery');\nlet _ = require('lodash');\n\nvar _require = require('datav-g2plot-adaptor');\n\nlet Scatter = _require.Scatter;\n\nmodule.exports = Event.extend(function Base(container, config) {\n    this.config = {\n        theme: {}\n    };\n    this.container = $(container);\n    this.apis = config.apis;\n    this._data = null;\n    this.chart = null;\n    this.init(config);\n}, {\n    init: function init(config) {\n        this.mergeConfig(config);\n\n        this.updateLayout();\n\n        this.chart = new Scatter(this.container[0], {\n            appendPadding: 10,\n            data: [],\n            xField: 'x',\n            yField: 'y',\n            shape: 'circle',\n            colorField: 'colorField',\n            size: 4,\n            yAxis: {\n                title: {\n                    text: 'Comments'\n                },\n                nice: true,\n                line: {\n                    style: {\n                        stroke: '#aaa'\n                    }\n                }\n            },\n            xAxis: {\n                title: {\n                    text: 'Views'\n                },\n                min: -100,\n                grid: {\n                    line: {\n                        style: {\n                            stroke: '#eee'\n                        }\n                    }\n                },\n                line: {\n                    style: {\n                        stroke: '#aaa'\n                    }\n                }\n            }\n        });\n\n        this.updateStyle();\n        this.chart.render();\n    },\n\n    render: function render(data, config) {\n        data = this.data(data);\n\n        this.chart.changeData(data);\n\n        this.updateStyle();\n    },\n\n    resize: function resize(width, height) {\n        this.updateLayout(width, height);\n    },\n\n    setColors: function setColors() {},\n\n    data: function data(_data) {\n        if (_data) {\n            this._data = _data;\n        }\n        return this._data;\n    },\n\n    mergeConfig: function mergeConfig(config) {\n        if (!config) {\n            return this.config;\n        }\n        this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n        this.setColors();\n        this.config = _.defaultsDeep(config || {}, this.config);\n        return this.config;\n    },\n\n    updateLayout: function updateLayout() {},\n\n    updateStyle: function updateStyle() {\n        var cfg = this.config;\n        this.container.css({\n            'font-size': cfg.size + 'px',\n            'color': cfg.color || '#fff'\n        });\n    },\n\n    updateOptions: function updateOptions(config) {\n        this.chart.update({\n            pointStyle: {\n                stroke: config.options.graph.stroke.lineColor,\n                lineWidth: config.options.graph.stroke.lineWidth,\n                lineDash: config.options.graph.stroke.lineDash\n            },\n            size: config.options.graph.size,\n            color: config.options.graph.color\n\n        });\n    },\n\n    destroy: function destroy() {\n        console.log('请实现 destroy 方法');\n    }\n});","codeWraped":"Cube(\"/index.js\", [\"/node_modules/bcore/event.js\", \"/node_modules/jquery/dist/jquery.js\", \"/node_modules/lodash/lodash.js\", \"/node_modules/datav-g2plot-adaptor/g2plot.min.js\"], function (module, exports, require, load, process, global) {\n\n  let Event = require('/node_modules/bcore/event.js');\n  let $ = require('/node_modules/jquery/dist/jquery.js');\n  let _ = require('/node_modules/lodash/lodash.js');\n\n  var _require = require('/node_modules/datav-g2plot-adaptor/g2plot.min.js');\n\n  let Scatter = _require.Scatter;\n\n  module.exports = Event.extend(function Base(container, config) {\n    this.config = {\n      theme: {} };\n\n    this.container = $(container);\n    this.apis = config.apis;\n    this._data = null;\n    this.chart = null;\n    this.init(config);\n  }, {\n    init: function init(config) {\n      this.mergeConfig(config);\n\n      this.updateLayout();\n\n      this.chart = new Scatter(this.container[0], {\n        appendPadding: 10,\n        data: [],\n        xField: 'x',\n        yField: 'y',\n        shape: 'circle',\n        colorField: 'colorField',\n        size: 4,\n        yAxis: {\n          title: {\n            text: 'Comments' },\n\n          nice: true,\n          line: {\n            style: {\n              stroke: '#aaa' } } },\n\n\n\n        xAxis: {\n          title: {\n            text: 'Views' },\n\n          min: -100,\n          grid: {\n            line: {\n              style: {\n                stroke: '#eee' } } },\n\n\n\n          line: {\n            style: {\n              stroke: '#aaa' } } } });\n\n\n\n\n\n      this.updateStyle();\n      this.chart.render();\n    },\n\n    render: function render(data, config) {\n      data = this.data(data);\n\n      this.chart.changeData(data);\n\n      this.updateStyle();\n    },\n\n    resize: function resize(width, height) {\n      this.updateLayout(width, height);\n    },\n\n    setColors: function setColors() {},\n\n    data: function data(_data) {\n      if (_data) {\n        this._data = _data;\n      }\n      return this._data;\n    },\n\n    mergeConfig: function mergeConfig(config) {\n      if (!config) {\n        return this.config;\n      }\n      this.config.theme = _.defaultsDeep(config.theme || {}, this.config.theme);\n      this.setColors();\n      this.config = _.defaultsDeep(config || {}, this.config);\n      return this.config;\n    },\n\n    updateLayout: function updateLayout() {},\n\n    updateStyle: function updateStyle() {\n      var cfg = this.config;\n      this.container.css({\n        'font-size': cfg.size + 'px',\n        'color': cfg.color || '#fff' });\n\n    },\n\n    updateOptions: function updateOptions(config) {\n      this.chart.update({\n        pointStyle: {\n          stroke: config.options.graph.stroke.lineColor,\n          lineWidth: config.options.graph.stroke.lineWidth,\n          lineDash: config.options.graph.stroke.lineDash },\n\n        size: config.options.graph.size,\n        color: config.options.graph.color });\n\n\n    },\n\n    destroy: function destroy() {\n      console.log('请实现 destroy 方法');\n    } });return module.exports;});","sourceMap":null,"modifyTime":1620227338923,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/datav-g2plot-adaptor/g2plot.min.js"],"requiresOrigin":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/datav-g2plot-adaptor/g2plot.min.js"],"debugInfo":[],"requiresArgsRefer":[{"type":"StringLiteral","start":35,"end":48,"loc":{"start":{"line":3,"column":20},"end":{"line":3,"column":33}},"extra":{"rawValue":"bcore/event","raw":"'bcore/event'"},"value":"/node_modules/bcore/event.js"},{"type":"StringLiteral","start":67,"end":75,"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":24}},"extra":{"rawValue":"jquery","raw":"'jquery'"},"value":"/node_modules/jquery/dist/jquery.js"},{"type":"StringLiteral","start":94,"end":102,"loc":{"start":{"line":5,"column":16},"end":{"line":5,"column":24}},"extra":{"rawValue":"lodash","raw":"'lodash'"},"value":"/node_modules/lodash/lodash.js"},{"type":"StringLiteral","start":129,"end":151,"loc":{"start":{"line":7,"column":23},"end":{"line":7,"column":45}},"extra":{"rawValue":"datav-g2plot-adaptor","raw":"'datav-g2plot-adaptor'"},"value":"/node_modules/datav-g2plot-adaptor/g2plot.min.js"}]}